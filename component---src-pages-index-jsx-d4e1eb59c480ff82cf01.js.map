{"version":3,"sources":["webpack:///./src/pages/index.jsx","webpack:///./src/components/MesssageScreen.jsx"],"names":["query","IndexPage","props","noHeader","animGrid","title","srcSets","data","allFile","nodes","reduce","obj","childImageSharp","fluid","srcSet","name","rest","description","site","siteMetadata","useStyles","createUseStyles","opacity","transform","root","position","flexGrow","display","flexDirection","justifyContent","alignItems","maxWidth","maxHeight","logo","animationName","animationDirection","animationDuration","animationDelay","animationFillMode","zIndex","margin","wormhole","transformOrigin","left","top","text","width","fontFamily","fontSize","lineHeight","textTransform","playButtonsWrapper","button","textAlign","background","borderRadius","border","textDecoration","cursor","fontWeight","padding","bottom","right","buttonBig","buttonInsaneBig","MessageScreen","classes","setMuted","useSoundController","className","MKS_LOGO_GR_1980","alt","MKS_Wormhole_01","to","onClick","play","join"],"mappings":"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","file":"component---src-pages-index-jsx-d4e1eb59c480ff82cf01.js","sourcesContent":["/* eslint-disable react/prop-types */\nimport React from 'react';\nimport { graphql } from 'gatsby';\n\nimport Layout from '../components/Layout/Layout';\nimport SEO from '../components/Layout/SEO';\nimport MessageScreen from '../components/MesssageScreen';\n\nconst normalizeSrcSets = ({\n  data: { allFile: { nodes = [] } = {} } = {},\n}) => nodes.reduce((obj, {\n  childImageSharp: {\n    fluid: { srcSet = null } = {},\n  } = {},\n  name,\n  ...rest\n} = {}) => ({\n  ...obj,\n  // [name]: srcSet,\n  [name]: {\n    ...rest,\n    name,\n    srcSet,\n  },\n}), {});\n\nconst IndexPage = (props) => (\n  <Layout noHeader animGrid>\n    <SEO title=\"METAKRONISMS\" />\n\n    <MessageScreen\n      srcSets={normalizeSrcSets(props)}\n      // eslint-disable-next-line react/destructuring-assignment\n      description={props.data.site.siteMetadata.description}\n    />\n  </Layout>\n);\n\nexport const query = graphql`\n  {\n    site {\n      siteMetadata {\n        title\n        description\n      }\n    }\n    allFile(filter: {extension: {in: [\"png\", \"jpg\", \"jpeg\"]}, dir: {regex: \"/src\\\\/images$/\"}}) {\n      nodes {\n        relativePath\n        relativeDirectory\n        root\n        dir\n        name\n        extension\n        childImageSharp {\n          fluid {\n            srcSet\n          }\n        }\n      }\n    }\n  }\n`;\n\nexport default IndexPage;\n","/* eslint-disable react/prop-types */\nimport React from 'react';\n\nimport { createUseStyles } from 'react-jss';\nimport Link from './Link';\n\nimport { useSoundController } from './SoundController/SoundController';\n\nconst useStyles = createUseStyles({\n  '@keyframes appear': {\n    '0%': {\n      opacity: 0,\n    },\n    '100%': {\n      opacity: 1,\n    },\n  },\n  '@keyframes wormhole': {\n    '0%': {\n      transform: 'scale(1.8, 1.8) rotateZ(359deg)',\n      opacity: 0,\n    },\n    '100%': {\n      transform: 'scale(1, 1) rotateZ(0deg)',\n      opacity: 1,\n    },\n  },\n  root: {\n    position: 'relative',\n    flexGrow: 1,\n    display: 'flex',\n    flexDirection: 'column',\n    justifyContent: 'center',\n    alignItems: 'center',\n    // overflow: 'hidden',\n    maxWidth: '100%',\n    maxHeight: '100%',\n  },\n  logo: {\n    animationName: '$appear',\n    animationDirection: 'reverse',\n    animationDuration: '500ms',\n    animationDelay: '4500ms',\n    animationFillMode: 'both',\n    zIndex: 1,\n    position: 'relative',\n    // maxWidth: '80vw',\n    // maxHeight: '80vh',\n    margin: 'auto',\n  },\n  wormhole: () => ({\n    maxWidth: 'none',\n    transformOrigin: 'center',\n    animationName: '$wormhole',\n    animationDuration: '5500ms',\n    animationDelay: '500ms',\n    animationFillMode: 'both',\n    zIndex: 2,\n    position: 'fixed',\n    left: '50%',\n    top: '50%',\n    margin: {\n      top: '-50%',\n      left: '-50%',\n    },\n  }),\n  text: {\n    margin: 'auto',\n    width: '80vw',\n    maxWidth: 750,\n    animationName: '$appear, $appear',\n    animationDuration: '500ms, 500ms',\n    animationDelay: '6500ms, 12000ms',\n    animationFillMode: 'backwards, forwards',\n    animationDirection: 'normal, reverse',\n    zIndex: 3,\n    position: 'fixed',\n    fontFamily: 'KRSNA-DREAMER',\n    fontSize: '2rem',\n    lineHeight: '2.2rem',\n    textTransform: 'lowercase',\n  },\n  playButtonsWrapper: {\n    display: 'flex',\n    flexDirection: 'column',\n    animationName: '$appear',\n    animationDuration: '500ms',\n    animationDelay: '12000ms',\n    animationFillMode: 'both',\n    zIndex: 4,\n    position: 'fixed',\n  },\n  button: {\n    margin: 20,\n    textAlign: 'center',\n    fontSize: '1.2rem',\n    background: 'linear-gradient(lime, transparent 42%, transparent 58%, lime)',\n    textTransform: 'lowercase',\n    borderRadius: 1000,\n    border: '1px solid lime',\n    textDecoration: 'none',\n    cursor: 'pointer',\n    fontFamily: 'KRSNA-DREAMER',\n    fontWeight: 700,\n    padding: {\n      top: 4,\n      bottom: 6,\n      left: 12,\n      right: 12,\n    },\n    '&:link,&:hover': {\n      textDecoration: 'none',\n    },\n  },\n  buttonBig: {\n    fontSize: '2rem',\n    padding: {\n      top: 8,\n      bottom: 12,\n      left: 24,\n      right: 24,\n    },\n  },\n  buttonInsaneBig: {\n    '$button&': {\n      fontSize: '3rem',\n      padding: {\n        top: 17,\n        bottom: 25,\n        left: 36,\n        right: 36,\n      },\n    },\n  },\n}, { name: 'MessageScreen' });\n\nconst MessageScreen = (props) => {\n  const {\n    srcSets,\n    description,\n  } = props;\n\n  const classes = useStyles(props);\n\n  const { setMuted } = useSoundController() || {};\n\n  return (\n    <div className={classes.root}>\n      <img\n        className={classes.logo}\n        srcSet={srcSets.MKS_LOGO_GR_1980.srcSet}\n        alt=\"METAKRONISMS\"\n      />\n      <img\n        className={classes.wormhole}\n        srcSet={srcSets.MKS_Wormhole_01.srcSet}\n        alt=\"wormhole\"\n      />\n      <div\n        className={classes.text}\n      >\n        {description}\n      </div>\n\n      <div className={classes.playButtonsWrapper}>\n        <Link\n          to=\"episodes/s0/e0\"\n          onClick={() => setMuted(false)}\n          className={[\n            classes.play,\n            classes.button,\n            classes.buttonInsaneBig,\n          ].join(' ')}\n\n        >\n          Play with sound enabled\n        </Link>\n\n        <Link\n          to=\"episodes/s0/e0\"\n          className={[\n            classes.play,\n            classes.button,\n            classes.buttonInsaneBig,\n          ].join(' ')}\n\n        >\n          Play withouth sound\n        </Link>\n      </div>\n    </div>\n  );\n};\n\nexport default MessageScreen;\n"],"sourceRoot":""}